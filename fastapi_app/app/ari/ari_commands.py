from typing import Optional
import asyncio

import httpx
import websockets
import json
import logging

from .ari_config import (ARI_HOST, STASIS_APP_NAME, EXTERNAL_HOST, SIP_HOST, ARI_TIMEOUT)
from app.crud.ai_agent import create_call, append_status_to_call
from app.schemas.ai_agent import (CallCreate, PhoneCreate, CallStatusDB,
                                  CallStatuses)

logger = logging.getLogger(__name__)


class AriClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å ARI."""

    def __init__(self, base_url: str, headers: dict):
        self.base_url = base_url
        self.headers = headers
        self.client = httpx.AsyncClient(timeout=httpx.Timeout(ARI_TIMEOUT))

    def _normalize_response(self, response) -> dict:
        """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ—Ç–≤–µ—Ç –æ—Ç ARI –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å."""
        status = response.status_code
        if not response:
            return {}
        if status != 200 and not 204:
            raise RuntimeError(f"–û—à–∏–±–∫–∞ –æ—Ç ARI: {response.text}")
        return response.json() if response.text else {}

    async def _send_request(self, url: str, method: str, data: Optional[
            dict] = None) -> dict:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å."""
        if method.lower() == 'post':
            response = await self.client.post(
                url, json=data, headers=self.headers)
        elif method.lower() == 'delete':
            response = await self.client.delete(url)
        else:
            raise ValueError('Unsupported method')
        return self._normalize_response(response)

    async def create_channel(self, endpoint: str) -> dict:
        """–°–æ–∑–¥–∞—Ç—å –∫–∞–Ω–∞–ª."""
        url = f'{self.base_url}/channels/create'
        data = {
            "endpoint": endpoint,
            "app": STASIS_APP_NAME,
            "timeout": 30
        }
        return await self._send_request(url, 'POST', data)

    async def dial_channel(self, channel_id: str) -> None:
        """–ü–æ–¥–∫–ª—é—á–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞."""
        url = f"{self.base_url}/channels/{channel_id}/dial"
        await self._send_request(url, "POST")

    async def play_audio(self, channel_id: str) -> None:
        """–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∑–≤—É–∫."""
        url = f"{self.base_url}/channels/{channel_id}/play"
        data = {
            "media": "sound:hello-world"  # http://217.114.3.34/audio-2.alaw
        }
        await self._send_request(url, 'POST', data)

    async def record_call(
            self, channel_id, filename="client_call_recording",
            format="wav", beep=True, max_duration_seconds=0,
            max_silence_seconds=0, if_exists="overwrite") -> dict:
        """–ó–∞–ø–∏—Å—å –∑–≤–æ–Ω–∫–∞ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏."""
        url = f"{ARI_HOST}/channels/{channel_id}/record"

        data = {
            "format": format,  # —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø–∏—Å–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, wav –∏–ª–∏ mp3)
            "name": filename,  # –∏–º—è —Ñ–∞–π–ª–∞ –∑–∞–ø–∏—Å–∏
            "beep": beep,  # —Ñ–ª–∞–≥ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—å—é
            "maxDurationSeconds": max_duration_seconds,
            # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏
            "maxSilenceSeconds": max_silence_seconds,
            # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Ç–∏—à–∏–Ω—ã, –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –∑–∞–ø–∏—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è
            "ifExists": if_exists
            # —á—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (overwrite –∏–ª–∏ append)
        }
        await self._send_request(url, "POST", data)

    async def hangup_call(self, channel_id: int) -> None:
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞."""
        url = f"{self.base_url}/channels/{channel_id}"
        await self._send_request(url, "DELETE")

    async def create_bridge(self) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –±—Ä–∏–¥–∂, –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ id."""
        url = f"{self.base_url}/bridges"
        response = await self._send_request(url, "POST", {"type": "mixing"})
        return response['id']

    async def add_channel_to_bridge(self, bridge_id: str,
                                    channel_id: str) -> None:
        """–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –≤ –±—Ä–∏–¥–∂."""
        url = f"{ARI_HOST}/bridges/{bridge_id}/addChannel"
        data = {"channel": channel_id}
        await self._send_request(url, "POST", data)

    async def record_bridge(self, bridge_id: str, filename: str) -> None:
        """–ó–∞–ø–∏—Å–∞—Ç—å –±—Ä–∏–¥–∂."""
        url = f"{ARI_HOST}/bridges/{bridge_id}/record"
        data = {
            "name": filename,
            "format": "gsm",
            "ifExists": "overwrite",
            "beep": True
        }
        await self._send_request(url, "POST", data)

    async def create_external_media(self, uuid: str):
        url = f"{ARI_HOST}/channels/externalMedia"
        data = {
            "app": STASIS_APP_NAME,
            "external_host": EXTERNAL_HOST,
            "encapsulation": "audiosocket",
            "transport": "tcp",
            "format": "alaw",
            "data": uuid
        }
        return await self._send_request(url, 'POST', data)

    async def create_snoop_on_channel(self, channel_id) -> dict:
        url = f"{ARI_HOST}/channels/{channel_id}/snoop"
        data = {
            "spy": "both",
            "whisper": "both",
            "app": STASIS_APP_NAME
        }
        return await self._send_request(url, 'POST', data)


class WSHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ WebSocket —Å–æ–±—ã—Ç–∏–π."""

    def __init__(self, ws_host: str, headers: dict, ari_client: AriClient,
                 phone: str, uuid: str):
        self.ws_host = ws_host
        self.headers = headers
        self.ari_client = ari_client
        self.phone = phone
        self.uuid = uuid
        self.call = None
        self.sip_endpoint = f'SIP/{self.phone}@{SIP_HOST}'
        self.current_bridge_id: str = None
        self.current_external_id: str = None
        self.client_channel_id: str = None

    def parse_qos_data(value: str) -> dict:
        """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É —Ñ–æ—Ä–º–∞—Ç–∞ key=value;key=value –≤ —Å–ª–æ–≤–∞—Ä—å."""
        return dict(item.split('=') for item in value.strip(';').split(';') if '=' in item)

    async def handle_connection_info(self, event_type: str, event: dict) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–∏—Ö–æ–¥—è—â—É—é –æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏."""
        logger.error(event)
        event_var = event.get('variable')
        value = event.get('value', '')
        channel = event.get('channel', {})
        channel_name = channel.get("name", "unknown")

        def log_qos_info(title: str, parsed: dict):
            logger.info(f"\nüì° {title} –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_name}")
            for k, v in parsed.items():
                logger.info(f"{k}: {v}")

        if event_var == 'STASISSTATUS':
            logger.info(f"üåÄ –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Stasis: {value or 'EMPTY'} –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_name}")

        elif event_var == 'BRIDGEPEER':
            logger.info(f"üîó –ö–∞–Ω–∞–ª {channel_name} —Å–æ–µ–¥–∏–Ω—ë–Ω —Å: {value or '–ø—É—Å—Ç–æ'}")

        elif event_var == 'BRIDGEPVTCALLID':
            logger.info(f"üîê Private Call ID –≤ –±—Ä–∏–¥–∂–µ: {value}")

        elif event_var in ['RTPAUDIOQOS', 'RTPAUDIOQOSBRIDGED']:
            title = "üìä RTP QoS (–æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª)" if event_var == 'RTPAUDIOQOS' else "üìä RTP QoS (bridged –∫–∞–Ω–∞–ª)"
            data = self.parse_qos_data(value)
            log_qos_info(title, {
                "ssrc": data.get("ssrc"),
                "themssrc": data.get("themssrc"),
                "lp (local loss)": data.get("lp"),
                "rxjitter": data.get("rxjitter"),
                "rxcount": data.get("rxcount"),
                "txjitter": data.get("txjitter"),
                "txcount": data.get("txcount"),
                "rlp (remote loss)": data.get("rlp"),
                "rtt (ping round-trip)": data.get("rtt"),
                "rxmes (media delay recv)": data.get("rxmes"),
                "txmes (media delay send)": data.get("txmes"),
            })

        elif event_var in ['RTPAUDIOQOSJITTER', 'RTPAUDIOQOSJITTERBRIDGED']:
            title = "üéØ Jitter —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–æ—Å–Ω–æ–≤–Ω–æ–π)" if event_var == 'RTPAUDIOQOSJITTER' else "üéØ Jitter —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (bridged)"
            data = self.parse_qos_data(value)
            log_qos_info(title, {
                "minrxjitter": data.get("minrxjitter"),
                "maxrxjitter": data.get("maxrxjitter"),
                "avgrxjitter": data.get("avgrxjitter"),
                "stdevrxjitter": data.get("stdevrxjitter"),
                "mintxjitter": data.get("mintxjitter"),
                "maxtxjitter": data.get("maxtxjitter"),
                "avgtxjitter": data.get("avgtxjitter"),
                "stdevtxjitter": data.get("stdevtxjitter"),
            })

        elif event_var in ['RTPAUDIOQOSLOSS', 'RTPAUDIOQOSLOSSBRIDGED']:
            title = "‚ùå –ü–æ—Ç–µ—Ä–∏ –ø–∞–∫–µ—Ç–æ–≤ (–æ—Å–Ω–æ–≤–Ω–æ–π)" if event_var == 'RTPAUDIOQOSLOSS' else "‚ùå –ü–æ—Ç–µ—Ä–∏ –ø–∞–∫–µ—Ç–æ–≤ (bridged)"
            data = self.parse_qos_data(value)
            log_qos_info(title, {
                "minrxlost": data.get("minrxlost"),
                "maxrxlost": data.get("maxrxlost"),
                "avgrxlost": data.get("avgrxlost"),
                "stdevrxlost": data.get("stdevrxlost"),
                "mintxlost": data.get("mintxlost"),
                "maxtxlost": data.get("maxtxlost"),
                "avgtxlost": data.get("avgtxlost"),
                "stdevtxlost": data.get("stdevtxlost"),
            })

        elif event_var in ['RTPAUDIOQOSRTT', 'RTPAUDIOQOSRTTBRIDGED']:
            title = "‚è± RTT —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–æ—Å–Ω–æ–≤–Ω–æ–π)" if event_var == 'RTPAUDIOQOSRTT' else "‚è± RTT —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (bridged)"
            data = self.parse_qos_data(value)
            log_qos_info(title, {
                "minrtt": data.get("minrtt"),
                "maxrtt": data.get("maxrtt"),
                "avgrtt": data.get("avgrtt"),
                "stdevrtt": data.get("stdevrtt"),
            })

        elif event_var in ['RTPAUDIOQOSMES', 'RTPAUDIOQOSMESBRIDGED']:
            title = "üìê Media Delay (–æ—Å–Ω–æ–≤–Ω–æ–π)" if event_var == 'RTPAUDIOQOSMES' else "üìê Media Delay (bridged)"
            data = self.parse_qos_data(value)
            log_qos_info(title, {
                "minrxmes": data.get("minrxmes"),
                "maxrxmes": data.get("maxrxmes"),
                "avgrxmes": data.get("avgrxmes"),
                "stdevrxmes": data.get("stdevrxmes"),
                "mintxmes": data.get("mintxmes"),
                "maxtxmes": data.get("maxtxmes"),
                "avgtxmes": data.get("avgtxmes"),
                "stdevtxmes": data.get("stdevtxmes"),
            })

        else:
            logger.info(f"üîç –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è: {event_var} = {value}")

    async def handle_client_channel_events(
            self, event_type: str, event: dict) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –æ—Ç–Ω–æ—Å—è—â–∏–µ—Å—è —Ç–æ–ª—å–∫–æ –∫ –ö–ª–∏–µ–Ω—Ç—Å–∫–æ–º—É –∫–∞–Ω–∞–ª—É."""

        # Client channel info
        channel_info: dict = event.get('channel', {})

        # Mark True if event is related to client_channel
        client_channel_event = channel_info.get('id') == self.client_channel_id

        # Mark True if client_channel has answered call
        client_channel_answer = (
            event.get('dialstatus') == 'ANSWER'
            and event.get('peer', {}).get('id') == self.client_channel_id
        )
        logger.info(
            f"–û–¢–í–ï–¢–ò–õ–ò–ò–ò–ò–ò–ò???? {client_channel_answer} –∞ –≤–æ—Ç –ø–æ—á–µ–º—É "
            f"peer.id, status = {event.get('peer', {}).get('id'), event.get('dialstatus')}"
        )
        if event_type == 'StasisStart' and client_channel_event:
            logger.error('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–∏–ª–æ –¥–æ—Å—Ç—É–ø –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é')
            await append_status_to_call(
                self.client_channel_id,
                [CallStatusDB(status_str=CallStatuses.STASIS_START)])
            await self.ari_client.dial_channel(self.client_channel_id)

        elif event_type == 'Dial' and client_channel_answer:
            logger.error('–ê–±–æ–Ω–µ–Ω—Ç –æ—Ç–≤–µ—Ç–∏–ª')
            await self.ari_client.add_channel_to_bridge(
                self.current_bridge_id, self.current_external_id)
            await append_status_to_call(
                self.client_channel_id,
                [CallStatusDB(status_str=CallStatuses.ANSWERED)])

        elif event_type == 'ChannelHangupRequest' and client_channel_event:
            logger.error('–ê–±–æ–Ω–µ–Ω—Ç —Å–±—Ä–æ—Å–∏–ª')

    async def handle_events(self, websocket: websockets.ClientConnection):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º websocket —Å–æ–±—ã—Ç–∏—è."""
        # while True:
        # message = await websocket.recv()
        async for message in websocket:
            logger.info(message)
            event = json.loads(message)
            event_type = event['type']
            await self.handle_client_channel_events(event_type, event)
            if event_type == 'ChannelVarset':
                # –ï—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∫–∞–Ω–∞–ª–∞ - —ç—Ç–æ –∏–Ω—Ñ–∞ –æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏
                await self.handle_connection_info(event_type, event)

    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –ø–æ WebSocket –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è."""
        async with websockets.connect(
                self.ws_host, additional_headers=self.headers) as websocket:
            logger.info('Connected to ARI with app %s', STASIS_APP_NAME)

            self.current_bridge_id = await self.ari_client.create_bridge()

            logger.info(f'BRIDGE: {self.current_bridge_id}')

            # –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª –¥–ª—è –≤—ã–∑–æ–≤–∞
            logger.error(f'SIP_ENDPOINT: {self.sip_endpoint}')
            client = await self.ari_client.create_channel(self.sip_endpoint)
            self.client_channel_id = client['id']

            # –°–æ–∑–¥–∞–µ–º –≤ –±–∞–∑–µ –æ–±—å–µ–∫—Ç –∑–≤–æ–Ω–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            phone_data = PhoneCreate(digits=self.phone)
            call_data = CallCreate(
                channel_id=self.client_channel_id, phone=phone_data,
                uuid=self.uuid,
                statuses=[CallStatusDB(status_str=CallStatuses.CREATED)]
            )
            self.call = await create_call(call_data)

            logger.error(f'CLIENT_CHANNEL_ID: {self.client_channel_id}')
            logger.error(f'BRIDGE_ID: {self.current_bridge_id}')

            external_media = await self.ari_client.create_external_media(
                self.uuid)

            logger.error(f'EXTERNAL_MEDIA_ID: {external_media}')
            self.current_external_id = external_media['id']
            # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–¥–∞—á—É –ø–æ—Ç–æ–∫–∞ –≤–æ –≤–Ω–µ—à–Ω–∏–π —Ä–µ—Å—É—Ä—Å
            await self.ari_client.add_channel_to_bridge(
                self.current_bridge_id, self.client_channel_id)

            await self.handle_events(websocket)
